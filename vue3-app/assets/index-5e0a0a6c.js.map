{"version":3,"mappings":"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","names":["log","type","color","title","info","textArr","t","text","config","__publicField","request","url","controller","token","res","urlList","_url","_a","data","user","password","userData","list","menu","router","to","handleNav","name","__default__","value","loading","showLoading","hideLoading","toggleLoading","width","height","update","clientRect","val","state","count","setCount","btnText","disabled","requestRef","prevTime","timeDifferance","animate","timestamp","buy","emits","code","target","descriptor","oldValue","asyncF1","resolve","asyncF2","foo","bar","e","Person","rawCode","_withCtx","_createTextVNode","nowTime","getNowTime","now","h","m","s","event","err","_component_el_button","_resolveComponent","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","_ctx","_createVNode","keyword","handleSearch","keyword2","cancelApi","source","pc","offerSdp","answerSdp","className","html","open","localVideo","remoteVideo","localStream","track","dataChannel","offer","reject","HttpPost","rej","answerSdp2","reason","xhr","createOffer","createAnswer","answer","addAnswer","chunks","recorder","startRecord","stream","startRecording","mime","blob","video","stopRecord","downRecord","a","hello","Person111","person111","Person222","person222","PersonA","Teacher","age","XiaoJieJie","_age","www1","Status","get","handleClick","filePath","module","routerName","$component","item","App","ElementPlus","WeDesign","hljsVuePlugin"],"sources":["../../../vue-app/vue3-app/src/libs/log.ts","../../../vue-app/vue3-app/src/libs/request.ts","../../../vue-app/vue3-app/src/libs/index.ts","../../../vue-app/vue3-app/src/api/user.ts","../../../vue-app/vue3-app/src/api/index.ts","../../../vue-app/vue3-app/src/store/user.ts","../../../vue-app/vue3-app/src/store/menu.ts","../../../vue-app/vue3-app/src/App.vue","../../../vue-app/vue3-app/src/views/Algorithm/index.vue","../../../vue-app/vue3-app/src/hooks/useLoading.ts","../../../vue-app/vue3-app/src/hooks/useResize.ts","../../../vue-app/vue3-app/src/hooks/useState.ts","../../../vue-app/vue3-app/src/views/CountBuy/index.vue","../../../vue-app/vue3-app/src/views/DesignPatterns/patterns/FactoryPatterns.vue","../../../vue-app/vue3-app/src/views/DesignPatterns/patterns/SinglePatterns.vue","../../../vue-app/vue3-app/src/views/DesignPatterns/patterns/AdaptPatterns.vue","../../../vue-app/vue3-app/src/views/DesignPatterns/patterns/DecoratorPatterns.vue","../../../vue-app/vue3-app/src/views/DesignPatterns/patterns/ProxyPatterns.vue","../../../vue-app/vue3-app/src/views/DesignPatterns/patterns/IteratorPatterns.vue","../../../vue-app/vue3-app/src/views/DesignPatterns/index.vue","../../../vue-app/vue3-app/src/views/ES6/index.ts","../../../vue-app/vue3-app/src/views/ES6/index.vue","../../../vue-app/vue3-app/src/components/AsyncShow.vue","../../../vue-app/vue3-app/src/components/Timer.vue","../../../vue-app/vue3-app/src/views/Home/index.vue","../../../vue-app/vue3-app/src/views/JsBase/index.vue","../../../vue-app/vue3-app/src/views/JsWebApi/index.vue","../../../vue-app/vue3-app/src/views/Pinia/index.vue","../../../vue-app/vue3-app/src/views/Race/index.vue","../../../vue-app/vue3-app/src/views/Talking/index.vue","../../../vue-app/vue3-app/src/views/TypeScript/index.ts","../../../vue-app/vue3-app/src/views/TypeScript/index.vue","../../../vue-app/vue3-app/src/components/WeButton.vue","../../../vue-app/vue3-app/src/views/WeiDesign/index.vue","../../../vue-app/vue3-app/src/router/index.ts","../../../vue-app/vue3-app/src/main.ts"],"sourcesContent":["/**\n * @Author: forguo\n * @Date: 2023/1/15 15:11\n * @Description: log.ts\n */\n\ninterface ILog {\n    capsule: (title: any, info: any, type: string) => void\n    colorful: (textArr: any[]) => void\n    default: (text: any) => void\n    primary: (text: any) => void\n    success: (text: any) => void\n    warning: (text: any) => void\n    info: (text: any) => void\n    danger: (text: any) => void\n}\n\nexport const log: any = {}\n\n/**\n * @description 返回这个样式的颜色值\n * @param {String} type 样式名称 [ default | primary | success | warning | info | danger ]\n * 同element-plus按钮主题\n * https://element-plus.org/zh-CN/guide/theming.html#%E9%80%9A%E8%BF%87-scss-%E5%8F%98%E9%87%8F\n */\nfunction typeColor(type = 'default') {\n    let color = ''\n    switch (type) {\n        case 'default':\n            color = '#515a6e'\n            break\n        case 'primary':\n            color = '#409eff'\n            break\n        case 'success':\n            color = '#67c23a'\n            break\n        case 'warning':\n            color = '#e6a23c'\n            break\n        case 'info':\n            color = '#909399'\n            break\n        case 'danger':\n            color = '#f56c6c'\n            break\n        default:\n            break\n    }\n    return color\n}\n\n/**\n * @description 打印一个 [ title | text ] 样式的信息\n * @param {String} title title text\n * @param {String} info info text\n * @param {String} type style\n */\nlog.capsule = function (title: any, info: any, type = 'primary') {\n    console.log(\n        `%c ${title} %c ${info} %c`,\n        'background:#35495E; padding: 1px; border-radius: 3px 0 0 3px; color: #fff;',\n        `background:${typeColor(type)}; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff;`,\n        'background:transparent'\n    )\n}\n\n/**\n * @description 打印彩色文字\n */\nlog.colorful = function (textArr: any[]) {\n    console.log(\n        `%c${textArr.map(t => JSON.stringify(t.text || '')).join('%c')}`,\n        ...textArr.map(t => `color: ${typeColor(t.type)};`)\n    )\n}\n\n/**\n * @description 打印 default 样式的文字\n */\nlog.default = function (text: any) {\n    log.colorful([{ text }])\n}\n\n/**\n * @description 打印 primary 样式的文字\n */\nlog.primary = function (text: any) {\n    log.colorful([{ text, type: 'primary' }])\n}\n\n/**\n * @description 打印 success 样式的文字\n */\nlog.success = function (text: any) {\n    log.colorful([{ text, type: 'success' }])\n}\n\n/**\n * @description 打印 warning 样式的文字\n */\nlog.warning = function (text: any) {\n    log.colorful([{ text, type: 'warning' }])\n}\n\n/**\n * @description 打印 info 样式的文字\n */\nlog.info = function (text: any) {\n    log.colorful([{ text, type: 'info' }])\n}\n\n/**\n * @description 打印 danger 样式的文字\n */\nlog.danger = function (text: any) {\n    log.colorful([{ text, type: 'danger' }])\n}\n\nexport default log\n","/**\n * @Author: forguo\n * @Date: 2022/5/16 21:29\n * @Description: request.ts.js\n */\n\nimport axios from 'axios'\nimport type { AxiosInstance, AxiosRequestConfig } from 'axios'\nimport { log } from '@/libs/index'\n\nexport interface IResponse {\n    code?: number\n    message?: string\n    time?: string | number\n    data?: any\n}\n\nclass Request {\n    // axios实例\n    instance: AxiosInstance\n    // 用于存储控制器对象\n    abortControllerMap: Map<string, AbortController>\n    // 构造函数\n    constructor(config?: AxiosRequestConfig) {\n        // 创建axios实例\n        this.instance = axios.create(config)\n        // 用于存储控制器对象\n        this.abortControllerMap = new Map()\n        // 设置拦截器\n        this.setInterceptors(this.instance)\n    }\n    // 请求\n    request(config: AxiosRequestConfig): Promise<IResponse> {\n        return this.instance(config)\n    }\n    // 拦截器\n    setInterceptors(request: AxiosInstance) {\n        // 请求拦截器\n        request.interceptors.request.use((config: any) => {\n            // toDo 也可以在这里做一个重复请求的拦截\n            // https://github.com/axios/axios/tree/main#abortcontroller\n            // 请求url为key\n            const url = config.url || ''\n            // 实例化控制器\n            const controller = new AbortController()\n            // 将控制器实例与请求绑定\n            config.signal = controller.signal\n            // 将控制器实例存储到Map中\n            this.abortControllerMap.set(url, controller)\n            const token = localStorage.getItem('token')\n            if (config && config.headers && token) {\n                config.headers = {\n                    ...config.headers,\n                    token\n                }\n            }\n            return config\n        })\n        // 响应拦截器\n        request.interceptors.response.use(res => {\n            const url = res.config.url || ''\n            // 请求完成后，将控制器实例从Map中移除\n            this.abortControllerMap.delete(url)\n            if (axios.isCancel(res)) {\n                console.log('Request canceled', res)\n                return Promise.reject(res)\n            }\n            if (res.status === 200) {\n                return Promise.resolve(res.data)\n            }\n            log.danger(res)\n            return Promise.reject(res)\n        })\n    }\n    /**\n     * 取消全部请求\n     */\n    cancelAllRequest() {\n        for (const [, controller] of this.abortControllerMap) {\n            // 取消请求\n            controller.abort()\n        }\n        this.abortControllerMap.clear()\n    }\n    /**\n     * 取消指定的请求\n     * @param url 待取消的请求URL\n     */\n    cancelRequest(url: string | string[]) {\n        const urlList = Array.isArray(url) ? url : [url]\n        for (const _url of urlList) {\n            // 取消请求\n            this.abortControllerMap.get(_url)?.abort()\n            this.abortControllerMap.delete(_url)\n        }\n    }\n}\n\nexport default Request\n","/**\n * @Author: forguo\n * @Date: 2023/2/20 17:35\n * @Description: index.js\n */\nexport { default as log } from '@/libs/log'\nexport { default as ajax } from '@/libs/ajax'\nexport * from '@/libs/utils'\nimport Request from '@/libs/request'\nimport type { AxiosRequestConfig } from 'axios'\n\nconst instance = new Request()\n\n// 请求\nexport const request = (config: AxiosRequestConfig) => {\n    return instance.request(config)\n}\n\n// 取消请求\nexport const cancelRequest = (url: string) => {\n    return instance.cancelRequest(url)\n}\n","/**\n * @Author: forguo\n * @Date: 2022/7/14 13:58\n * @Description: user\n */\nimport { request } from '@/libs'\n\nexport default {\n    /**\n     * Simulate a login\n     * @param {object} data\n     */\n    login: (data: any) =>\n        request({\n            method: 'post',\n            url: '/api/user/login',\n            data\n        })\n}\n","/**\n * @Author: forguo\n * @Date: 2022/7/14 14:00\n * @Description: index\n */\nimport user from './user'\n\nexport default {\n    user\n}\n","import { defineStore, acceptHMRUpdate } from 'pinia'\nimport api from '@/api'\n\nconst useUserStore = defineStore({\n    id: 'user',\n    state: () => ({\n        name: '',\n        isAdmin: false,\n        signature: ''\n    }),\n    actions: {\n        /**\n         * user  logout\n         */\n        logout() {\n            this.$patch({\n                name: '',\n                isAdmin: false\n            })\n        },\n        /**\n         * user login\n         * @param {string} user\n         * @param {string} password\n         */\n        async login(user: string, password: string) {\n            const userData = await api.user.login({\n                user,\n                password\n            })\n            const data = {\n                name: user,\n                ...userData.data\n            }\n            console.log('login-success', data)\n            this.$patch(data)\n        }\n    }\n})\n\nexport default useUserStore\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useUserStore, import.meta.hot))\n}\n","import { defineStore, acceptHMRUpdate } from 'pinia'\n\nconst useMenuStore = defineStore({\n    id: 'menu',\n    state: () => ({\n        list: []\n    }),\n    actions: {\n        updateMenu(list: Array<any>) {\n            this.$patch({\n                list: [...this.list, ...list]\n            })\n        }\n    }\n})\n\nexport default useMenuStore\n\nif (import.meta.hot) {\n    import.meta.hot.accept(acceptHMRUpdate(useMenuStore, import.meta.hot))\n}\n","<template>\n    <el-container style=\"height: 100vh; overflow: hidden\">\n        <el-aside style=\"max-width: 200px; height: 100vh\" v-if=\"false\">\n            <el-menu :default-active=\"$route?.path || '/'\" router style=\"height: 100%\">\n                <el-menu-item\n                    :index=\"path\"\n                    v-for=\"{ path, title, name } in menu.list\"\n                    :key=\"path\"\n                    @select=\"handleNav(name)\"\n                >\n                    <span>{{ title }}</span>\n                </el-menu-item>\n                <el-menu-item :to=\"{ path: '/vue2-app' }\" index=\"/vue2-app\">\n                    <span>vue2微应用</span>\n                </el-menu-item>\n            </el-menu>\n        </el-aside>\n        <el-container>\n            <el-header style=\"background-color: #f6f9fe; display: flex; align-items: center\">\n                <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n                    <el-breadcrumb-item>{{ $route?.meta?.title }}</el-breadcrumb-item>\n                </el-breadcrumb>\n            </el-header>\n            <el-main style=\"background: #f2f3f5\">\n                <el-card\n                    style=\"width: 100%; height: 100%; box-sizing: border-box; display: flex; flex-direction: column\"\n                    shadow=\"never\"\n                    body-style=\"flex: 1;width: 100%; height: 100%;\"\n                >\n                    <!--                    <template #header>-->\n                    <!--                        <div class=\"card-header\">-->\n                    <!--                            <span>{{ $route?.meta?.title }}</span>-->\n                    <!--                        </div>-->\n                    <!--                    </template>-->\n                    <router-view />\n                    <div id=\"vue2App\"></div>\n                </el-card>\n            </el-main>\n            <el-footer\n                style=\"\n                    display: none;\n                    background-color: #f6f9fe;\n                    /*display: flex;*/\n                    align-items: center;\n                    justify-content: center;\n                \"\n            >\n                &copy; 2022\n            </el-footer>\n        </el-container>\n    </el-container>\n</template>\n\n<script lang=\"ts\" setup>\nimport { onBeforeRouteUpdate, useRouter, onBeforeRouteLeave } from 'vue-router'\nimport { ref } from 'vue'\nimport { useMenuStore } from '@/store'\nconst isDev = ref(import.meta.env.MODE === 'development')\nconst menu = useMenuStore()\nconst router = useRouter()\nonBeforeRouteUpdate(to => {\n    console.log({ ...router }, to)\n})\nonBeforeRouteLeave(to => {\n    console.log({ ...router }, to)\n})\nconst handleNav = (name: string) => {\n    console.log(name)\n    router.push({\n        name\n    })\n}\n</script>\n","<!--\n * @Name: index.vue\n * @Author: forguo\n * @Date: 2022/10/10 14:23\n * @Description: index\n-->\n<template>\n    <div class=\"page algorithm\">算法</div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { onBeforeMount } from 'vue'\nimport rawCode from './index'\nonBeforeMount(() => {\n    rawCode()\n})\n</script>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'AlgorithmView',\n    title: '算法',\n    inheritAttrs: false,\n    customOptions: {}\n}\n</script>\n<style scoped></style>\n","const useLoading = function (value: boolean = false) {\n    const loading = ref<boolean>(value)\n\n    function showLoading() {\n        loading.value = true\n    }\n\n    function hideLoading() {\n        loading.value = false\n    }\n    function toggleLoading() {\n        loading.value = !loading.value\n    }\n    return {\n        value: loading,\n        showLoading,\n        hideLoading,\n        toggleLoading\n    }\n}\n\nexport default useLoading\n","import { onMounted, onUnmounted, ref } from 'vue'\n\nconst useResize = function () {\n    const width = ref<number>(0)\n    const height = ref<number>(0)\n    function update() {\n        const clientRect = document.body.getBoundingClientRect()\n        width.value = clientRect.width\n        height.value = clientRect.height\n    }\n    onMounted(() => {\n        update()\n        window.addEventListener('resize', update)\n    })\n    onUnmounted(() => {\n        window.removeEventListener('resize', update)\n    })\n    return {\n        width,\n        height\n    }\n}\n\nexport default useResize\n","import { ref } from 'vue'\nimport type { Ref } from 'vue'\n\ninterface IState<T> {\n    (value: T): void\n}\n\nconst useState = function <T>(val: T): [Ref<T>, IState<T>] {\n    const state: Ref = ref(val)\n    const setState: IState<T> = function <T>(value: T) {\n        state.value = value\n    }\n    return [state, setState]\n}\n\nexport default useState\n","<!--\n * @Name: index.vue\n * @Author: forguo\n * @Date: 2023/8/11 15:34\n * @Description: index\n-->\n<template>\n    <div class=\"page count-buy\">\n        <el-card>\n            要求用 vue 或者 react 实现一个倒计时抢券组件，页面加载时从 10s\n            开始倒计时，倒计时结束之后点击按钮请求接口进行抢券，同时更新文案等等功能。\n        </el-card>\n        <el-button :disabled=\"disabled\" :loading=\"loading\" @click=\"buy\">{{ btnText }}</el-button>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useLoading, useState } from '@/hooks'\n\n// emits\nconst emits = defineEmits(['buy'])\n\n// state\n// 默认10\nconst [count, setCount] = useState(10)\nconst { value: loading, showLoading, hideLoading } = useLoading()\n\n// 按钮文案\nconst btnText = computed(() => {\n    return count.value > 0 ? `${count.value}s` : `购买`\n})\n\n// 按钮是否可点击\nconst disabled = computed(() => {\n    return count.value > 0\n})\n\nlet requestRef: any = null\nlet prevTime: number | undefined\nlet timeDifferance = 0 // 每1s倒计时偏差值，单位ms\n\nconst animate = (timestamp: number) => {\n    if (prevTime) {\n        if (count.value <= 0) {\n            cancelAnimationFrame(requestRef)\n            return\n        }\n        if (parseInt(String(timeDifferance / 1000)) === 1) {\n            timeDifferance = 0\n            setCount(count.value - 1)\n        }\n        // 时间差\n        timeDifferance = timestamp - prevTime + timeDifferance\n        prevTime = timestamp\n    } else {\n        prevTime = timestamp\n    }\n    requestAnimationFrame(animate)\n}\n\n// lifecycle\nonBeforeMount(() => {\n    requestRef = requestAnimationFrame(animate)\n})\n\nonUnmounted(() => {\n    // interval && clearInterval(interval)\n})\n\n// methods\nconst buy = () => {\n    showLoading()\n    setTimeout(() => {\n        console.log('buy')\n        alert('购买成功')\n        hideLoading()\n        emits('buy')\n    }, 1000)\n}\n</script>\n<script lang=\"ts\">\nexport default {\n    name: 'CountBuy'\n}\n</script>\n","<!--\n * @Name: FactoryPatterns.vue\n * @Author: forguo\n * @Date: 2023/4/1 11:09\n * @Description: 工厂模式\n-->\n<template>\n    <el-card>\n        <template #header>{{ title }}</template>\n        <highlightjs language=\"JavaScript\" lineNumbers :autodetect=\"false\" :code=\"code\"></highlightjs>\n    </el-card>\n</template>\n\n<script lang=\"ts\" setup>\nimport { nextTick, defineProps } from 'vue'\ndefineProps({\n    title: String\n})\nconsole.log('工厂模式')\nconst code = `\n// 构造函数和创建者分离\nfunction Jquery (selector) {\n  this.selector = document.querySelectorAll(selector)\n}\n// new操作单独封装\nwindow.$ = function (selector) {\n  return new Jquery(selector)\n}\nvar p = $('div')\nconsole.log(p)\n    `\nnextTick(() => {\n    eval(code)\n})\n</script>\n<style scoped lang=\"scss\"></style>\n","<!--\n * @Name: SinglePatterns.vue\n * @Author: forguo\n * @Date: 2023/4/1 11:09\n * @Description: 单例模式\n-->\n<template>\n    <el-card>\n        <template #header>{{ title }}</template>\n        <highlightjs language=\"JavaScript\" :autodetect=\"false\" :code=\"code\"></highlightjs>\n    </el-card>\n</template>\n\n<script lang=\"ts\" setup>\nimport { defineProps, nextTick } from 'vue'\ndefineProps({\n    title: String\n})\nconst code = `\nclass SingleObject {\n    showMessage() {\n      console.log('showMessage', this)\n    }\n}\nSingleObject.getInstance = (function () {\n   let instance = null\n    return function () {\n      if (!instance) {\n        instance =  new SingleObject()\n      }\n      return instance\n    }\n})()\n\nconsole.log(SingleObject.getInstance() === SingleObject.getInstance())\n    `\nnextTick(() => {\n    eval(code)\n})\n</script>\n<style scoped lang=\"scss\"></style>\n","<!--\n * @Name: AdaptPatterns.vue\n * @Author: forguo\n * @Date: 2023/4/1 11:09\n * @Description: 适配器模式\n-->\n<template>\n    <el-card>\n        <template #header>{{ title }}</template>\n        <highlightjs language=\"JavaScript\" lineNumbers :autodetect=\"false\" :code=\"code\"></highlightjs>\n    </el-card>\n</template>\n\n<script lang=\"ts\" setup>\nimport { defineProps, nextTick } from 'vue'\ndefineProps({\n    title: String\n})\n\nconst code = `\nclass SpecialRequest {\n    request() {\n      return 'old'\n    }\n}\n\nclass Request {\n  constructor() {\n    // 封装旧接口\n    this.adptor = new SpecialRequest()\n  }\n  request () {\n    let type = this.adptor.request()\n    console.log(type)\n  }\n}\nnew Request().request()\n    `\nnextTick(() => {\n    eval(code)\n})\n</script>\n<style scoped lang=\"scss\"></style>\n","<!--\n * @Name: DecoratorPatterns.vue\n * @Author: forguo\n * @Date: 2023/4/1 11:09\n * @Description: 装饰者模式\n-->\n<template>\n    <el-card>\n        <template #header>{{ title }}</template>\n        <el-alert>AOP 面向切片编程</el-alert>\n        <highlightjs language=\"JavaScript\" lineNumbers :autodetect=\"false\" :code=\"code\"></highlightjs>\n    </el-card>\n</template>\n\n<script lang=\"ts\" setup>\nimport { defineProps, nextTick } from 'vue'\ndefineProps({\n    title: String\n})\nconst code = `\nclass Circle {\n    constructor() {\n        this.border = 'none'\n    }\n    draw() {\n        console.log('draw Circle', this)\n    }\n}\n\nclass Client {\n    constructor(circle) {\n        this.circle = circle\n    }\n    // 添加新功能\n    draw() {\n        this.circle.draw()\n        this.setBorder(this.circle)\n        this.circle.draw()\n    }\n    setBorder(circle) {\n        circle.border = '1px'\n        console.log('setBorder', circle)\n    }\n}\nnew Client(new Circle()).draw()\n    `\nnextTick(() => {\n    eval(code)\n})\n</script>\n<style scoped lang=\"scss\"></style>\n","<!--\n * @Name: ProxyPatterns.vue\n * @Author: forguo\n * @Date: 2023/4/1 11:09\n * @Description: 代理模式\n-->\n<template>\n    <el-card>\n        <template #header>{{ title }}</template>\n        <highlightjs language=\"JavaScript\" lineNumbers :autodetect=\"false\" :code=\"code\"></highlightjs>\n    </el-card>\n</template>\n\n<script lang=\"ts\" setup>\nimport { defineProps, nextTick } from 'vue'\ndefineProps({\n    title: String\n})\nconst code = `\nclass ReadImg {\n  constructor(fileName) {\n    this.fileName = fileName\n    this.loadImg()\n  }\n  show() {\n    console.log('show image', this.fileName)\n  }\n  loadImg() {\n    console.log('load image', this.fileName)\n\n  }\n}\nclass ProxyImg {\n  constructor(fileName) {\n    this.img = new ReadImg(fileName)\n  }\n  show() {\n    this.img.show()\n  }\n}\n\nnew ProxyImg('www.png').show()\n    `\nnextTick(() => {\n    eval(code)\n})\n</script>\n<style scoped lang=\"scss\"></style>\n","<!--\n * @Name: IteratorPatterns.vue\n * @Author: forguo\n * @Date: 2023/4/1 11:09\n * @Description: 迭代器模式\n-->\n<template>\n    <el-card>\n        <template #header>{{ title }}</template>\n        <highlightjs language=\"JavaScript\" :autodetect=\"false\" :code=\"code\"></highlightjs>\n    </el-card>\n</template>\n\n<script lang=\"ts\" setup>\nimport { defineProps, nextTick } from 'vue'\nconsole.log('设计模式')\ndefineProps({\n    title: String\n})\n\nconst code = `\n\n// 迭代器模式\nclass Iterator {\n    constructor(container) {\n        this.list = container.list\n        this.index = 0\n    }\n    hasNext() {\n        return this.index < this.list.length\n    }\n    next() {\n        if (this.hasNext()) {\n            return this.list[this.index++]\n        }\n        return null\n    }\n}\n\nclass Container {\n    constructor(list) {\n        this.list = list\n    }\n    getGetIterator() {\n        return new Iterator(this)\n    }\n}\n\nconst arr = [100, 99, 3]\nconst list = new Container(arr)\nconst generate = list.getGetIterator()\nconsole.log(generate.next())\nconsole.log(generate.next())\nconsole.log(generate.next())\nconsole.log(generate.next())\n\n// ES6 iterator\nconst iterator = arr[Symbol.iterator]()\n// 有数据返回 {value: 100, done: false}\nconsole.log(iterator.next())\nconsole.log(iterator.next())\nconsole.log(iterator.next())\n// 没有数据返回 {value: undefined, done: true}\nconsole.log(iterator.next())\n\n// for of 语法\nfunction each(data) {\n    // iterator 实现\n    const iterator = data[Symbol.iterator]()\n    let item = { done: false }\n    while (!item.done) {\n        item = iterator.next()\n        if (!item.done) {\n            console.log(item.value)\n        }\n    }\n    // for of 实现\n    for (const item of data) {\n        console.log(item)\n    }\n}\n\neach(arr)\n\n    `\nnextTick(() => {\n    eval(code)\n})\n</script>\n<style scoped lang=\"scss\"></style>\n","<template>\n    <div class=\"page page-scroll-y design-patterns\">\n        <el-link href=\"//forguo.cn\" target=\"_blank\" type=\"primary\">设计模式</el-link>\n        <el-collapse>\n            <el-collapse-item title=\"面向对象\">\n                <el-descriptions title=\"\" :column=\"1\">\n                    <el-descriptions-item label=\"面向对象的概念\"></el-descriptions-item>\n                    <el-descriptions-item label=\"面向对象的三要素\"></el-descriptions-item>\n                    <el-descriptions-item label=\"面向对象的意义\">\n                        数据结构化 比如浏览器的渲染，最终是解析成了DOM树，cssom，最后才去渲染\n                    </el-descriptions-item>\n                    <el-descriptions-item label=\"jQuery中的应用\"></el-descriptions-item>\n                </el-descriptions>\n            </el-collapse-item>\n            <el-collapse-item title=\"5大设计原则\">\n                <el-descriptions title=\"\" :column=\"1\">\n                    <el-descriptions-item label=\"S\">单一职责原则</el-descriptions-item>\n                    <el-descriptions-item label=\"O\">开放封闭原则（开放扩展，封闭修改）</el-descriptions-item>\n                    <el-descriptions-item label=\"L\">李氏置换原则</el-descriptions-item>\n                    <el-descriptions-item label=\"I\">接口独立原则</el-descriptions-item>\n                    <el-descriptions-item label=\"D\">依赖导致原则</el-descriptions-item>\n                </el-descriptions>\n            </el-collapse-item>\n            <el-collapse-item title=\"23种设计模式\">\n                <FactoryPatterns title=\"工厂模式\" />\n                <SinglePatterns title=\"单列模式\" />\n                <AdaptPatterns title=\"适配器模式\" />\n                <DecoratorPatterns title=\"装饰器模式\" />\n                <ProxyPatterns title=\"代理模式\" />\n                <IteratorPatterns title=\"迭代器模式\" />\n                <el-alert type=\"success\" :closable=\"false\" style=\"margin-bottom: 12px\">订阅、发布模式</el-alert>\n                <el-alert type=\"success\" :closable=\"false\" style=\"margin-bottom: 12px\">原型模式</el-alert>\n                <el-alert type=\"success\" :closable=\"false\" style=\"margin-bottom: 12px\">状态模式</el-alert>\n                <el-alert type=\"success\" :closable=\"false\" style=\"margin-bottom: 12px\">享元模式</el-alert>\n                <el-alert type=\"success\" :closable=\"false\" style=\"margin-bottom: 12px\">策略模式</el-alert>\n                <el-alert type=\"success\" :closable=\"false\" style=\"margin-bottom: 12px\">策略模式</el-alert>\n            </el-collapse-item>\n        </el-collapse>\n    </div>\n</template>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'DesignPatterns',\n    title: '设计模式',\n    inheritAttrs: false,\n    customOptions: {}\n}\n</script>\n\n<script lang=\"ts\" setup>\nimport {\n    IteratorPatterns,\n    FactoryPatterns,\n    SinglePatterns,\n    AdaptPatterns,\n    DecoratorPatterns,\n    ProxyPatterns\n} from './patterns/index'\n</script>\n<style lang=\"scss\">\n.design-patterns {\n    .el-card {\n        margin-bottom: 16px;\n    }\n}\n</style>\n","export const log = function (type = 'log') {\n    return function (target: any, name: any, descriptor: any) {\n        const oldValue = descriptor.value\n        descriptor.value = async function () {\n            console.log(`log ${type} ${name} start`)\n            // eslint-disable-next-line prefer-rest-params\n            await oldValue.apply(this, arguments)\n            console.log(`log ${type} ${name} end`)\n        }\n        return descriptor\n    }\n}\n\nexport default async () => {\n    const asyncF1 = function () {\n        console.log('asyncF1', Date.now())\n        // 这里需要加return，将异步执行结果进行返回\n        return new Promise(resolve => {\n            setTimeout(() => {\n                console.log('resolve 1')\n                resolve('async 1')\n            }, 1000)\n        })\n    }\n\n    const asyncF2 = function () {\n        console.log('asyncF2', Date.now())\n        return new Promise(resolve => {\n            setTimeout(() => {\n                console.log('resolve 2')\n                resolve('async 2')\n            }, 1000)\n        })\n    }\n\n    const request = async function () {\n        try {\n            // 写法二\n            // let fooPromise = asyncF1();\n            // let barPromise = asyncF2();\n            // let res1 = await fooPromise;\n            // let res2 = await barPromise;\n            // // let res1 = await asyncF1();\n            // // let res2 = await asyncF2();\n            // console.log(res1);\n            // console.log(res2);\n            //\n            const [foo, bar] = await Promise.all([asyncF1(), asyncF2()])\n            console.log(foo, bar)\n\n            // // 继发\n            // for (const item of [asyncF1, asyncF2]) {\n            //     const res = await item()\n            //     console.log(res)\n            // }\n            //\n            // // 继发\n            // for (let i = 0; i < 3; i++) {\n            //     console.log(i)\n            //     const res = await asyncF1()\n            //     console.log(res)\n            // }\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    await request()\n\n    // es6装饰器\n    class Person {\n        name: string\n        constructor(name: string) {\n            this.name = name\n        }\n\n        // \"experimentalDecorators\": true,\n        @log('get')\n        getName() {\n            console.log('getName', Date.now())\n        }\n    }\n    new Person('test').getName()\n}\n","<!--\n * @Name: index.vue\n * @Author: forguo\n * @Date: 2022/9/17 22:14\n * @Description: index\n-->\n<template>\n    <div class=\"page es6\">es6</div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { onBeforeMount } from 'vue'\nimport rawCode from './index'\n\nonBeforeMount(async () => {\n    rawCode()\n})\n</script>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'ES6View',\n    title: 'ES6',\n    inheritAttrs: false,\n    customOptions: {}\n}\n</script>\n\n<style scoped></style>\n","<!--\n * @Name: AsyncShow.vue\n * @Author: forguo\n * @Date: 2022/5/17 16:03\n * @Description: AsyncShow\n-->\n<template>\n    <el-card shadow=\"hover\">\n        <template #header>我是异步组件</template>\n        <div>\n            {{ res }}\n        </div>\n    </el-card>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { request } from '@/libs'\n\nexport default defineComponent({\n    name: 'AsyncShow',\n    async setup() {\n        const res = await request({\n            url: 'https://api.fenghua.rainyman.cn/auth/login',\n            params: {\n                url: window.location.href\n            }\n        })\n        console.log(res.data)\n        return {\n            res: res.data\n        }\n    }\n})\n</script>\n\n<style scoped></style>\n","<template>\n    <el-card>\n        <el-alert class=\"we-timer\" :closable=\"false\">现在是：{{ nowTime }}</el-alert>\n    </el-card>\n</template>\n\n<script lang=\"ts\" setup>\ndefineProps({\n    countDown: {\n        type: Number,\n        default: 0\n    }\n})\n\ndefineEmits(['count-down'])\n\ndefineOptions({\n    name: 'TimerView',\n    title: 'Timer'\n})\nconst nowTime = ref<string>('00:00:00')\n\nconst getNowTime = () => {\n    const now = new Date()\n    const h = now.getHours() < 10 ? `0${now.getHours()}` : now.getHours()\n    const m = now.getMinutes() < 10 ? `0${now.getMinutes()}` : now.getMinutes()\n    const s = now.getSeconds() < 10 ? `0${now.getSeconds()}` : now.getSeconds()\n    nowTime.value = `${h}:${m}:${s}`\n    window.requestAnimationFrame(getNowTime)\n}\n\nonMounted(() => {\n    getNowTime()\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.we-timer {\n    font-size: 13px;\n    color: #000;\n}\n</style>\n","<template>\n    <div class=\"home\">\n        <Timer :title=\"1\" type=\"success\" />\n\n        <el-divider />\n\n        <suspense>\n            <template #default>\n                <async-show />\n            </template>\n            <template #fallback>加载中...</template>\n        </suspense>\n    </div>\n</template>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'HomeView',\n    title: '首页'\n}\n</script>\n\n<script lang=\"ts\" setup>\nimport {\n    onBeforeMount,\n    onMounted,\n    onErrorCaptured,\n    onBeforeUpdate,\n    onUpdated,\n    onRenderTracked,\n    onRenderTriggered\n} from 'vue'\n\nconsole.log('1-开始创建组件-----setup()')\n\n/**\n * 生命周期\n */\nonBeforeMount(() => {\n    console.log('2-组件挂载到页面之前执行-----onBeforeMount()')\n})\n\nonMounted(() => {\n    console.log('3-组件挂载到页面之后执行-----onMounted()')\n})\nonBeforeUpdate(() => {\n    console.log('4-组件更新之前-----onBeforeUpdate()')\n})\n\nonUpdated(() => {\n    console.log('5-组件更新之后-----onUpdated()')\n})\n\nonRenderTracked(event => {\n    console.log('状态跟踪组件----------->')\n    console.log(event)\n})\n\nonRenderTriggered(event => {\n    console.log('状态触发组件--------------->')\n    console.log(event)\n})\n\n// 异常捕获\nonErrorCaptured(err => {\n    console.log('/*******************/')\n    console.log(err)\n    console.log('/*******************/')\n})\n</script>\n","<!--\n * @Name: index.vue\n * @Author: forguo\n * @Date: 2022/10/10 15:45\n * @Description: index\n-->\n<template>\n    <div class=\"page js-base\">JS基础</div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { onBeforeMount } from 'vue'\nonBeforeMount(() => {})\n</script>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'JsBaseView',\n    title: 'JS基础',\n    inheritAttrs: false,\n    customOptions: {}\n}\n</script>\n<style scoped></style>\n","<!--\n * @Name: index.vue\n * @Author: forguo\n * @Date: 2022/10/10 15:45\n * @Description: index\n-->\n<template>\n    <div class=\"page web-api\">Web Api</div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { onBeforeMount } from 'vue'\nimport rawCode from './index'\nonBeforeMount(() => {\n    rawCode()\n})\n</script>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'WebApiView',\n    title: 'WebApi',\n    inheritAttrs: false,\n    customOptions: {}\n}\n</script>\n<style scoped></style>\n","<!--\n * @Name: Pinia.vue\n * @Author: forguo\n * @Date: 2022/7/14 13:50\n * @Description: Pinia\n-->\n<template>\n    <div class=\"page pinia\">\n        <p>name: {{ user.name }}</p>\n        <p>signature: {{ user.signature || '' }}</p>\n        <p>\n            {{ JSON.stringify(user) }}\n        </p>\n        <el-button @click=\"handleAddCart\">登录</el-button>\n\n        <hr />\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { useUserStore } from '@/store'\nimport { ElMessage } from 'element-plus'\n\nexport default defineComponent({\n    components: {},\n    title: '状态',\n    setup() {\n        const user = useUserStore()\n        const handleAddCart = async () => {\n            console.log(user)\n            await user.login('admin', 'root')\n            console.log('handleAddCart --->')\n            ElMessage.success('Login Success~')\n        }\n        return {\n            user,\n            handleAddCart\n        }\n    }\n})\n</script>\n","<template>\n    <div class=\"page race\">\n        <el-card>\n            <el-link target=\"_blank\" href=\"https://mp.weixin.qq.com/s/smOJHGkPegvs5ENv7PTbmw\">竞态问题</el-link>\n            &nbsp;\n            <el-link target=\"_blank\" href=\"https://juejin.cn/post/7071518211392405541#heading-13\">axios封装</el-link>\n            <el-divider />\n            <el-input v-model=\"keyword\" @input=\"handleSearch\" clearable placeholder=\"请输入搜索内容\" />\n            <el-divider />\n            <el-table :data=\"res.data\" empty-text=\"暂无数据\">\n                <el-table-column prop=\"name\" label=\"姓名\" />\n                <el-table-column prop=\"age\" label=\"年龄\" />\n                <el-table-column prop=\"city\" label=\"城市\" />\n            </el-table>\n            <el-button @click=\"cancelApi\">取消请求</el-button>\n        </el-card>\n        <el-alert>width is {{ width }}, height is {{ height }}</el-alert>\n    </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n    name: 'HomeView',\n    title: '竞态问题'\n}\n</script>\n\n<script lang=\"ts\" setup>\nimport { onBeforeMount, reactive, ref } from 'vue'\nimport type { Ref } from 'vue'\nimport { request, cancelRequest } from '@/libs'\nimport axios from 'axios'\n\nimport useResize from '@/hooks/useResize'\n\nconst { width, height } = useResize()\n\nconst keyword: Ref<string> = ref('')\nlet res = reactive({\n    data: []\n})\n\nconst handleSearch = async (keyword?: string) => {\n    try {\n        cancelRequest('/api/search')\n        const data = await request({\n            method: 'post',\n            url: '/api/search',\n            data: {\n                keyword\n            }\n        })\n        res.data = data.data\n    } catch (e: any) {\n        if (axios.isCancel(e)) {\n            console.log('Request canceled', e)\n        } else {\n            // 处理错误\n            console.log('request', e)\n        }\n    }\n}\n\nconst cancelApi = () => {\n    const CancelToken = axios.CancelToken\n    const source = CancelToken.source()\n\n    axios\n        .get('/search', {\n            cancelToken: source.token\n        })\n        .catch(function (e) {\n            if (axios.isCancel(e)) {\n                console.log('Request canceled', e.message)\n            } else {\n                // 处理错误\n                console.log('request', e)\n            }\n        })\n\n    axios.post(\n        '/search',\n        {\n            name: 'new name'\n        },\n        {\n            cancelToken: source.token\n        }\n    )\n\n    // 取消请求（message 参数是可选的）\n    source.cancel('Operation canceled by the user.')\n}\nonBeforeMount(() => {\n    handleSearch()\n})\n</script>\n","<!--\n * @Name: TalkingView.vue\n * @Author: forguo\n * @Date: 2023/2/23 15:52\n * @Description: TalkingView\n-->\n<template>\n    <div class=\"page\" :class=\"['talking', { loading: className }]\">\n        <div class=\"talking-inner\" :class=\"{ loading: className }\">\n            <div class=\"talking-device\" :class=\"className\">\n                <!-- 给自己本地的视频播放设置静音，防止产生回音 -->\n                <video id=\"local\" class=\"talking-video\" autoplay playsinline muted></video>\n            </div>\n            <div class=\"talking-device\">\n                <video id=\"remote\" class=\"talking-video\" autoplay playsinline></video>\n            </div>\n            <div>\n                <el-input v-model=\"offerSdp\" placeholder=\"offer\" />\n                <el-input v-model=\"answerSdp\" placeholder=\"answer\" />\n                <div v-html=\"html\"></div>\n            </div>\n        </div>\n        <div class=\"talking-tool\">\n            <el-button @click=\"open\" type=\"primary\">1、发起通话</el-button>\n            <el-button @click=\"createOffer\" type=\"primary\">2、创建 offer</el-button>\n            <el-button @click=\"createAnswer\" type=\"primary\">3、创建 answer</el-button>\n            <el-button @click=\"addAnswer\" type=\"primary\">4、添加 answer</el-button>\n            <el-button @click=\"startRecord\">开始录屏</el-button>\n            <el-button @click=\"stopRecord\">结束录屏并下载</el-button>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'TalkingView',\n    title: 'Rtc通信'\n}\n</script>\n\n<script lang=\"ts\" setup>\n/**\n * 创建一个用于连接控制的 RTCPeerConnection 对象\n * 采集媒体流并添加到RTCPeerConnection 实例中\n * 建立连接，传输媒体流。\n */\n\nimport 'webrtc-adapter'\nimport { ref } from 'vue'\nimport type { Ref } from 'vue'\nimport { ElMessage } from 'element-plus'\nconst pc = new RTCPeerConnection()\n// import rtmp from 'rtmp-stream'\n\n// 创建本地/远程 SDP 描述, 用于描述本地/远程的媒体流\nlet offerSdp: Ref<string> = ref('')\nlet answerSdp: Ref<string> = ref('')\nlet className: Ref<string> = ref('')\nconst html: Ref<string> = ref(\n    'Using text interpolation: <span style=\"color: red\">This should be red.</span><script>console.log(\"alert(1)\")' +\n        '<' +\n        '/script>Using v-html directive: This should be red.'\n)\n// 开启通话\nconst open = async () => {\n    // 获取本地端视频标签\n    const localVideo = document.getElementById('local') as HTMLVideoElement\n    // 获取远程端视频标签\n    const remoteVideo = document.getElementById('remote') as HTMLVideoElement\n\n    // 采集本地媒体流\n    // getDisplayMedia ==> 获取屏幕共享的媒体流\n    const localStream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n    })\n\n    // 设置本地视频流\n    localVideo.srcObject = localStream\n\n    // 不推荐使用：已经过时的方法 [addStream API](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream)\n    // pc.addStream(localStream);\n\n    // 添加本地媒体流的轨道都添加到 RTCPeerConnection 中\n    localStream.getTracks().forEach(track => {\n        console.log(track)\n        pc.addTrack(track, localStream)\n    })\n\n    // 监听远程流，方法一：\n    pc.ontrack = (event: any) => {\n        remoteVideo.srcObject = event.streams[0]\n    }\n\n    // 方法二：你也可以使用 addStream API，来更加详细的控制流的添加\n    // const remoteStream: MediaStream = new MediaStream()\n    // pc.ontrack = (event) => {\n    //   event.streams[0].getTracks().forEach((track) => {\n    //     remoteStream.addTrack(track)\n    //   })\n    //   // 设置远程视频流\n    //   remoteVideo.srcObject = remoteStream\n    // }\n\n    // Create a data channel\n    let dataChannel = pc.createDataChannel('myDataChannel')\n    // 监听文件通道状态\n    // 当文件通道状态发生变化时触发\n    dataChannel.onopen = event => {\n        ElMessage.success('文件通道已打开')\n        console.log('🚀🚀🚀 / event', event)\n    }\n\n    // 当文件通道关闭时触发\n    dataChannel.onclose = event => {\n        ElMessage.warning('文件通道已关闭')\n    }\n\n    // 当文件通道发生错误时触发\n    dataChannel.onerror = event => {\n        ElMessage.error('文件通道发生错误')\n    }\n\n    // 当文件通道收到消息时触发\n    dataChannel.onmessage = event => {\n        // eslint-disable-next-line no-console\n        console.log('🚀🚀🚀 / event', event)\n    }\n\n    pc.createOffer({\n        offerToReceiveVideo: !0,\n        offerToReceiveAudio: !0\n    })\n        .then(offer => {\n            console.log(offer)\n            return pc.setLocalDescription(offer).then(() => {\n                return offer\n            })\n        })\n        .then((offer: any) => {\n            return new Promise((resolve, reject) => {\n                HttpPost('http://127.0.0.1', window.btoa(offer.sdp)).then(\n                    res => {\n                        resolve(res)\n                    },\n                    function (rej) {\n                        reject(rej)\n                    }\n                )\n            })\n        })\n        .then((answerSdp: any) => {\n            return pc.setRemoteDescription(\n                new RTCSessionDescription({\n                    type: 'answer',\n                    sdp: window.atob(answerSdp)\n                })\n            )\n        })\n        .then(() => {})\n        .catch(reason => {\n            throw reason\n        })\n\n    dataChannel.send('Hello world!')\n}\n\nconst HttpPost = (url: string, data: any) => {\n    return new Promise((resolve, reject) => {\n        let xhr: any = new XMLHttpRequest()\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {\n                let res = xhr.responseText\n                xhr.onreadystatechange = new Function()\n                xhr = null\n                resolve(res)\n            }\n        }\n        xhr.open('POST', url.replace('webrtc', 'http'), true)\n        xhr.send(data)\n    })\n}\n\n/**\n * 创建 offer（提案）\n */\nconst createOffer = async () => {\n    // 创建 offer\n    const offer = await pc.createOffer()\n    // 设置本地描述\n    await pc.setLocalDescription(offer)\n    // await pc.setLocalDescription()\n    // 到这里，我们本地的 offer 就创建好了，一般在这里通过信令服务器发送 offerSdp 给远端\n\n    // 监听 RTCPeerConnection 的 onicecandidate 事件，当 ICE 服务器返回一个新的候选地址时，就会触发该事件\n    pc.onicecandidate = async event => {\n        if (event.candidate) {\n            offerSdp.value = JSON.stringify(pc.localDescription)\n        }\n    }\n}\n\n/**\n * 创建 answer\n */\nconst createAnswer = async () => {\n    // 解析字符串\n    const offer = JSON.parse(offerSdp.value)\n    pc.onicecandidate = async event => {\n        // Event that fires off when a new answer ICE candidate is created\n        if (event.candidate) {\n            answerSdp.value = JSON.stringify(pc.localDescription)\n        }\n    }\n    await pc.setRemoteDescription(offer)\n    const answer = await pc.createAnswer()\n    await pc.setLocalDescription(answer)\n}\n\n// 添加 answer(应答)\nconst addAnswer = async () => {\n    const answer = JSON.parse(answerSdp.value)\n    if (!pc.currentRemoteDescription) {\n        pc.setRemoteDescription(answer)\n    }\n}\nlet chunks: any = []\nlet recorder: any = null\n\n// 录屏\nconst startRecord = async () => {\n    try {\n        // 获取用户屏幕录制的权限\n        const stream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true })\n        startRecording(stream)\n    } catch (e) {\n        console.log(e)\n    }\n}\n\nconst startRecording = (stream: MediaStream) => {\n    // 确认当前环境所支持的屏幕录制文件类型\n    const mime = MediaRecorder.isTypeSupported('video/webm; codecs=vp9') ? 'video/webm; codecs=vp9' : 'video/webm'\n\n    // 创建MediaRecorder对象\n    recorder = new MediaRecorder(stream, {\n        mimeType: mime\n    })\n\n    // 当录制数据可用时，将数据块添加到数组中\n    recorder.ondataavailable = function (e: { data: any }) {\n        chunks.push(e.data)\n    }\n\n    recorder.onstop = function () {\n        // 创建一个Blob对象\n        let blob = new Blob(chunks, { type: 'video/mp4' })\n\n        // 创建一个URL对象，将Blob对象转换成URL\n        let url = window.URL.createObjectURL(blob)\n\n        // 创建一个video元素，将URL设置为视频源\n        let video = document.createElement('video')\n        video.src = url\n        video.controls = true\n        // 将video元素添加到页面中\n        document.body.appendChild(video)\n    }\n    // 开始录制\n    recorder.start()\n}\n\nconst stopRecord = () => {\n    // 停止录制\n    recorder.stop()\n    setTimeout(() => {\n        downRecord()\n    }, 500)\n}\n\nconst downRecord = () => {\n    const blob = new Blob(chunks, { type: 'video/mp4' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.style.display = 'none'\n    a.download = `record.${Date.now()}.mp4`\n    a.click()\n    ElMessage.success('下载成功')\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.talking {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    &.loading {\n        background: #eee;\n    }\n    &-inner {\n        flex: 1;\n        display: flex;\n    }\n    &-device {\n        border-radius: 8px;\n        overflow: hidden;\n        width: 550px;\n        height: 350px;\n        border: 1px solid #eee;\n        background: #aaa;\n        margin-right: 24px;\n    }\n    &-video {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n    }\n}\n</style>\n","export default () => {\n    /**\n     * @Author: forguo\n     * @Date: 2021/10/25 10:11\n     * @Description: typescript 学习\n     */\n\n    // 1.全局安装 typescript\n    // npm install typescript -g\n    // yarn global add typescript\n\n    /**\n     * @title typescript的静态类型\n     */\n\n    // ** 基础静态类型\n    // number,string,null,undefined,symbol,boolean，void\n    const count: number = 1\n    const www: string = 'www'\n\n    // ** 自定义静态类型\n    interface People1 {\n        name: string\n        age: number\n    }\n\n    const weiGuo: People1 = {\n        name: 'weiGuo',\n        age: 25\n        // sex: 'man',\n    }\n\n    // ** 对象类型\n\n    // 对象\n    const my: {\n        name: string\n        age: number\n    } = {\n        name: 'weiGuo',\n        age: 25\n        // sex: 'man',\n    }\n\n    // 数组\n    const list: number[] = [1, 2, 3]\n    const list1: Array<number> = [1, 2, 3]\n    const list2: {\n        [index: number]: number\n    } = [1, 2, 3]\n\n    // 函数类型\n    const fn: () => string = () => 'fn1'\n\n    /**\n     * @title 类型注释和类型推断\n     */\n\n    // ** 类型注释\n    const count2: number = 123\n\n    // ** 类型推断\n    const count3 = 123\n\n    // ===> 工作使用问题（潜规则）\n    // 如果 TS 能够自动分析变量类型， 我们就什么也不需要做了\n    // 如果 TS 无法分析变量类型的话， 我们就需要使用类型注解\n\n    /**\n     * @title 函数参数和返回类型定义\n     */\n\n    // ** 简单类型定义\n\n    function getTotal(one: number, two: number): number {\n        return one + two\n    }\n\n    getTotal(1, 2)\n\n    // ** 无返回值的定义: void\n    function hello(): void {\n        console.log('hello')\n    }\n\n    hello()\n\n    // ** never返回值类型\n    // 抛出异常\n    function errFun(): never {\n        throw new Error()\n        console.log('error')\n    }\n\n    // 死循环\n    function whileFun(): never {\n        while (true) {}\n        console.log('error')\n    }\n\n    // ** 函数参数为对象\n\n    function add({ one, two }: { one: number; two: number }) {\n        return one + two\n    }\n\n    const total = add({ one: 1, two: 2 })\n\n    /**\n     * @title 数组类型的定义\n     */\n\n    // ** 基本类型\n    const numArr: number[] = [1, 2, 3]\n    const strArr: string[] = ['1', '2', '3']\n    const undefArr: undefined[] = [undefined, undefined, undefined]\n    const multiArr: (number | string)[] = ['1', 1] // 多个类型\n\n    // ** 对象类型的定义\n    // 类型别名(type alias)\n    type Info = {\n        name: string\n        age: number\n    }\n\n    const infoList: Info[] = [\n        {\n            name: 'forguo',\n            age: 25\n        }\n    ]\n\n    // 类进行定义\n    class InfoClass {\n        name: string | undefined\n        age: number | undefined\n    }\n\n    const infoList2: InfoClass[] = [\n        {\n            name: 'forguo',\n            age: 25\n        }\n    ]\n\n    /**\n     * @title 元组的使用和类型约束\n     */\n\n    // ** 基本应用\n\n    // 简单类型注解\n    const xiaojiejie: (string | number)[] = [0, 'teacher', 28]\n\n    // 数组中的每个元素类型的位置给固定住了，这就叫做元组\n    const xiaojiejie1: [string, number] = ['teacher', 28]\n\n    // ** 使用\n\n    const xiaojiejies: [string, string, number][] = [\n        ['dajiao', 'teacher', 28],\n        ['liuying', 'teacher', 18],\n        ['cuihua', 'teacher', 25]\n    ]\n\n    /**\n     * @title typescript中的interface接口\n     * @desc 用来规范类型的\n     */\n\n    // ** 初步了解\n    interface Girl {\n        name: string\n        age: number\n    }\n\n    const girl: Girl = {\n        name: 'xiaohua',\n        age: 18\n    }\n\n    // ** 类型别名和接口的区别\n    // 类型别名可以直接给类型，比如string，而接口必须代表对象。\n\n    type Name = string\n    const people1: Name = 'name'\n\n    // ** 可选值\n    interface Girl1 {\n        name: string\n        age?: number\n        address?: string\n    }\n\n    const girl1: Girl1 = {\n        name: 'nicai'\n        // age: 18,\n        // address: '浙江杭州'\n    }\n\n    // ** 任意值\n\n    interface Girl3 {\n        name: string\n        [propName: string]: any // 这个的意思是，属性的名字是字符串类型，属性的值可以是任何类型。\n        say(): string\n    }\n\n    const girl3: Girl3 = {\n        name: 'name',\n        sex: 1,\n        say() {\n            return '欢迎光临 ，红浪漫洗浴！！'\n        }\n    }\n\n    // ** 接口和类的约束\n\n    class girlC implements Girl3 {\n        name = ''\n        sex = ''\n        say() {\n            return this.name\n        }\n    }\n\n    // ** 接口间的继承\n\n    interface Teacher extends Girl {\n        teach(): string\n    }\n\n    /* 接口只是在 TypeScript 里帮我们作语法校验的工具，编译成正式的js代码，就不会有任何用处了。 */\n\n    /**\n     * @title typescript中类的概念和使用\n     */\n\n    /**\n     * @title typescript中类的访问类型\n     */\n\n    // ** public 默认 允许在类的内部和外部被调用\n\n    // ** private 只允许在类的内部被调用，外部不允许调用\n\n    // ** protected 允许在类内及继承的子类中使用\n\n    /**\n     * @title typescript中类的构造函数\n     */\n\n    class Person111 {\n        public name: string\n        constructor(name: string) {\n            this.name = name\n        }\n    }\n\n    const person111 = new Person111('www')\n    console.log(person111.name)\n\n    // 简写\n    class Person222 {\n        constructor(public name: string) {}\n    }\n    const person222 = new Person222('http')\n    console.log(person222.name)\n\n    // 类继承中的构造器写法\n\n    class PersonA {\n        constructor(public name: string) {\n            // 这里就不用再去 this.name = name;\n        }\n    }\n\n    class Teacher extends PersonA {\n        constructor(name: string, public age: number) {\n            super(name)\n        }\n    }\n\n    console.log(new Teacher('罗翔', 18))\n\n    /**\n     * @title typescript中类的Getter、Setter和static的使用\n     */\n\n    class XiaoJieJie {\n        public readonly _name: string\n        constructor(name: string, private _age: number) {\n            this._name = name\n        }\n        // ** get\n        get age() {\n            return this._age\n        }\n        // ** set\n        set age(age: number) {\n            this._age = age\n        }\n        say() {\n            return 'I am ' + this._age + 'years old' // XiaoJieJie.prototype.say = function\n        }\n        // ** 不用 new 出对象就可以使用类里的方法\n        static sayLove() {\n            return 'I Love you' // XiaoJieJie.sayLove = function\n        }\n    }\n    const www1 = new XiaoJieJie('www', 18)\n    www1.age = 20\n    // www1._name = 'www'; // 不可以修改\n    console.log(www1.age)\n    // XiaoJieJie.sayLove();\n\n    /**\n     * @title 抽象类的使用\n     */\n\n    abstract class DaBaoJian {\n        abstract skill(): any // 没有具体方法，这里不写括号\n    }\n\n    class PrimaryWaiter extends DaBaoJian {\n        skill() {\n            console.log('初级大保健')\n        }\n    }\n\n    class IntermediateWaiter extends DaBaoJian {\n        skill() {\n            console.log('中级大保健')\n        }\n    }\n\n    class SeniorWaiter extends DaBaoJian {\n        skill() {\n            console.log('终极大保健')\n        }\n    }\n\n    /**\n     * @title tsconfig.json\n     */\n\n    // typescript 的编译配置文件\n\n    // tsc init // 初始化tsconfig文件\n\n    // tsc // tsconfig编译\n\n    // ** 编译选项详解\n\n    // https://www.tslang.cn/docs/handbook/compiler-options.html\n\n    /**\n     * @title 联合类型和类型守护\n     */\n\n    // ** 联合类型 两个以上的参数类型\n    // ** 类型守护 对参数类型进行判断\n\n    /**\n     * @title 枚举的使用\n     */\n\n    enum Status {\n        success = 200,\n        error = 201,\n        auth = 401\n    }\n\n    console.log(Status.error)\n    console.log(Status[200])\n\n    /**\n     * @title 函数泛型\n     */\n\n    // 类型断言，此时不知道返回类型是什么，需要指定一个类型来处理\n    let res: number | string\n\n    res = 1\n    res = '2'\n\n    function get(data: number | string): number | string {\n        return data\n    }\n\n    ;(get(res) as string).length\n}\n","<!--\n * @Name: index.vue\n * @Author: forguo\n * @Date: 2022/9/17 22:14\n * @Description: index\n-->\n<template>\n    <div class=\"page\">typescript</div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { onBeforeMount } from 'vue'\nimport rawCode from './index'\n\nonBeforeMount(() => {\n    rawCode()\n})\n</script>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'TsView',\n    title: 'Ts',\n    inheritAttrs: false,\n    customOptions: {}\n}\n</script>\n<style scoped></style>\n","<!--\n * @Name: WeButton.vue\n * @Author: forguo\n * @Date: 2023/8/17 17:00\n * @Description: WeButton\n-->\n<template>\n    <button @click=\"emits('click')\" :disabled=\"loading || disabled\" class=\"we-button\" :class=\"[disabled, loading]\">\n        <slot />\n    </button>\n</template>\n<script lang=\"ts\" setup>\nconst props = defineProps({\n    loading: {\n        type: Boolean,\n        default: false\n    },\n    disabled: {\n        type: Boolean,\n        default: false\n    }\n})\nconst emits = defineEmits(['click'])\n</script>\n<script lang=\"ts\">\nexport default {\n    name: 'WeButton'\n}\n</script>\n<style lang=\"scss\">\n.we-button {\n    &.loading {\n        background: #eeeff3;\n    }\n}\n</style>\n","<template>\n    <div class=\"page wei-design\">\n        <h2>组件库</h2>\n\n        <el-divider />\n\n        <we-button @click=\"handleClick\">Default</we-button>\n    </div>\n</template>\n\n<script lang=\"ts\" setup>\nconst handleClick = () => {\n    console.log('success')\n}\n</script>\n\n<script lang=\"ts\">\n// 使用了setup写法时，额外的name、title等信息，需要单独一个script标签，并且lang同setup的script标签\nexport default {\n    name: 'WeiDesignView',\n    title: '组件库',\n    inheritAttrs: false,\n    customOptions: {}\n}\n</script>\n","/**\n * @Author: forguo\n * @Date: 2023/2/23 17:04\n * @Description: index.ts\n */\nimport { createRouter, createWebHistory } from 'vue-router'\n\n// 路由集合\nconst routes = [\n    {\n        path: '/',\n        name: 'Home',\n        title: '首页',\n        component: () => import('@/views/Home/index.vue'),\n        meta: {\n            name: 'Home',\n            title: '首页'\n        }\n    }\n]\n\n// 匹配到的文件默认是懒加载的，通过动态导入实现，并会在构建时分离为独立的 chunk。如果你倾向于直接引入所有的模块（例如依赖于这些模块中的副作用首先被应用），你可以传入 { eager: true } 作为第二个参数：\nconst views = import.meta.glob(`@/views/*/index.vue`, { eager: true })\n\n// 动态加载路由\nfor (const filePath in views) {\n    const module: any = views[filePath]\n    const match: Array<any> = filePath.match(/..\\/views\\/(\\w+)/) || []\n    // 匹配到的路由名称\n    const routerName = match[1]\n    // 找到example的组件，并加载\n    const $component = module.default\n    // /src/views/TypeScript/index.vue --> /src/views/TypeScript/index.vue\n    const componentPath = filePath.replace(/^\\/src/i, '..')\n    // 默认首页必须得\n    if (routerName && routerName !== 'Home' && !$component.hidden) {\n        const routerTitle = $component.title\n        const title = routerTitle || routerName\n        routes.push({\n            path: routerName === 'Home' ? '/' : `/${routerName}`,\n            name: routerName,\n            title,\n            // component: () => import(`${componentPath}`),\n            component: $component,\n            meta: {\n                name: routerName,\n                title\n            }\n        })\n    }\n}\n\nconst router = createRouter({\n    history: createWebHistory(import.meta.env.BASE_URL),\n    routes: [...routes]\n})\n\nexport const menus = routes.map((item: any) => {\n    delete item.component\n    return {\n        ...item\n    }\n})\n\nexport default router\n","import { createApp } from 'vue'\nimport { registerMicroApps, start } from 'qiankun'\nimport { createPinia } from 'pinia' // 状态管理\nimport { useMenuStore } from '@/store'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\n// highlight 的样式，依赖包，组件\nimport 'highlight.js/styles/github-dark.css'\nimport 'highlight.js/lib/common'\nimport hljsVuePlugin from '@highlightjs/vue-plugin'\n\n// @ts-ignore\nimport WeDesign from '@wei_design/web-vue'\nimport '@wei_design/web-vue/lib/style.css'\n\nimport { log } from '@/libs'\nimport App from './App.vue'\nimport './assets/main.scss'\nimport router, { menus } from './router'\n\nlog.capsule('Environment', `${import.meta.env.MODE}`, 'primary')\n// @ts-ignore\nlog.capsule('Version', `${process.env.APP_VERSION}`, 'primary')\n// @ts-ignore\nlog.capsule('BuildTime', `${process.env.APP_BUILD_TIME}`, 'primary')\n\nconst app = createApp(App)\n\napp.use(createPinia()).use(router).use(ElementPlus).use(WeDesign).use(hljsVuePlugin).mount('#app')\n\nconst menu = useMenuStore()\nmenu.updateMenu(menus)\n\n// 1、主应用中注册微应用\nregisterMicroApps([\n    {\n        name: 'vue2-app',\n        entry:\n            import.meta.env.MODE === 'development' ? '//localhost:10087' : '//wforguo.github.io/daily-code/vue2-app/',\n        container: '#vue2App',\n        activeRule: '/vue2-app',\n        props: { menus }\n    }\n])\nstart()\n"],"file":"assets/index-5e0a0a6c.js"}